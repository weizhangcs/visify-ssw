# events 块是 Nginx 正常运行所必需的，保持为空即可
events {}

http {
    # 包含 MIME 类型定义，以便浏览器能正确识别文件类型
    include /etc/nginx/mime.types;

    server {
        # Nginx 在容器内部监听 80 端口
        listen 80;

        # 定义一个 location 块来处理所有以 /media/ 开头的 URL 请求
        location /media/ {
            # 'alias' 指令将 URL 路径映射到一个文件系统目录。
            # 这个 /var/www/media_root/ 路径，必须与我们在 docker-compose.yml
            # 中为 nginx 服务挂载的共享数据卷的目标路径完全一致。
            alias /var/www/media_root/;

            #add_header 'Access-Control-Allow-Origin' '*' always;
            #add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            #add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            # 如果浏览器发送OPTIONS预检请求，直接返回204
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            # （可选）增加一些头信息，改善浏览器缓存行为
            expires 1d;
            add_header Cache-Control "public";
        }
    }
}