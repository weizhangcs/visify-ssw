"""
Django settings for visify_ssw project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from decouple import config

LABEL_STUDIO_URL = config('LABEL_STUDIO_URL', default='')
LABEL_STUDIO_ACCESS_TOKEN = config('LABEL_STUDIO_ACCESS_TOKEN', default='')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DJANGO_DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 我们自己的 App
    'apps.media_assets.apps.MediaAssetsConfig',

    # OIDC Client
    'mozilla_django_oidc',
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'mozilla_django_oidc.auth.OIDCAuthenticationBackend',
)

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'visify_ssw.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'visify_ssw.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('POSTGRES_DB'),
        'USER': config('POSTGRES_USER'),
        'PASSWORD': config('POSTGRES_PASSWORD'),
        'HOST': 'db', # 关键！服务名
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Media files (user-uploaded content and generated outputs)
# https://docs.djangoproject.com/en/4.2/topics/files/
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media_root'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration
CELERY_BROKER_URL = config("CELERY_BROKER_URL", default="redis://redis:6379/0")
CELERY_RESULT_BACKEND = config("CELERY_BROKER_URL", default="redis://redis:6379/0")
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_IMPORTS = ('apps.media_assets.tasks',)

# AWS Credentials
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default='')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default='')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='')
AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='')
AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN', default='')

# AWS S3 Path Prefixes
AWS_S3_PROCESSED_VIDEOS_PREFIX = config('AWS_S3_PROCESSED_VIDEOS_PREFIX', default='processed_videos/')
AWS_S3_SOURCE_SUBTITLES_PREFIX = config('AWS_S3_SOURCE_SUBTITLES_PREFIX', default='source_subtitles/')


# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", #sub editor production
    "http://localhost:3001" #sub editor dev
]


# (推荐) 明确允许所有常用的 HTTP 方法
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# (推荐) 明确允许所有常用的请求头
CORS_ALLOW_HEADERS = [
    "accept",
    "authorization",
    "content-type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]
# 或者，为了更灵活，允许所有以 localhost 开头的地址
# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^http://localhost:\d+$",
# ]

SUBEDITOR_URL = config("SUBEDITOR_URL", default="http://subeditor:3000")
LOCAL_MEDIA_URL_BASE = config('LOCAL_MEDIA_URL_BASE', default='http://localhost:9999')
LABEL_STUDIO_PUBLIC_URL = config("LABEL_STUDIO_PUBLIC_URL", default="http://localhost:8081")
SUBEDITOR_PUBLIC_URL = config("SUBEDITOR_PUBLIC_URL", default="http://localhost:3000")

# --- 加载存储后端配置 ---
# 从 .env 文件读取 STORAGE_BACKEND 的值，如果找不到，则默认为 'local'
STORAGE_BACKEND = config('STORAGE_BACKEND', default='local')

# FFmpeg Configuration
FFMPEG_VIDEO_BITRATE = config('FFMPEG_VIDEO_BITRATE', default='2M')
FFMPEG_VIDEO_PRESET = config('FFMPEG_VIDEO_PRESET', default='fast')

# --- OIDC Client for Authentik ---
OIDC_RP_CLIENT_ID = config('OIDC_RP_CLIENT_ID')
OIDC_RP_CLIENT_SECRET = config('OIDC_RP_CLIENT_SECRET')

# 【重要】请将下面 JWKS URL 中的 'vss-oidc-provider' 替换为您的真实 Provider Slug
# 用户浏览器重定向地址 (必须使用外部可访问的地址)
OIDC_OP_AUTHORIZATION_ENDPOINT = "http://localhost:9000/application/o/authorize/"
# 服务器间后台通信地址 (可以使用内部服务名)
OIDC_OP_TOKEN_ENDPOINT = "http://authentik-server:9000/application/o/token/"
OIDC_OP_USER_ENDPOINT = "http://authentik-server:9000/application/o/userinfo/"
OIDC_OP_JWKS_ENDPOINT = "http://authentik-server:9000/application/o/vss-workbench-django/jwks/"


# 定义登录流程
LOGIN_URL = '/oidc/authenticate/'
LOGIN_REDIRECT_URL = '/admin/' # 登录成功后跳转到 Admin 后台
#LOGIN_REDIRECT_URL = '/' # 登录成功后跳转到 Admin 后台
LOGOUT_REDIRECT_URL = '/'      # 登出后跳转到 Authentik 主页

# 指定 Authentik 使用的签名算法
OIDC_RP_SIGN_ALGO = 'RS256'

# 配置用户自动创建和字段映射
#OIDC_CREATE_USER = True
#OIDC_USERNAME_ALGO = 'mozilla_django_oidc.utils.get_email' # 使用 OIDC 提供的 email 作为 Django 用户名
#OIDC_USERNAME_ALGO = 'apps.media_assets.utils.get_username_from_claims' # 使用我们自定义的算法
#OIDC_USERNAME_CLAIM = 'email' # 直接使用 'email' claim 作为 Django 用户名
OIDC_CREATE_USER = 'apps.media_assets.auth.create_vss_user'
OIDC_OP_FETCH_USER_INFO = True # 确保获取用户信息
OIDC_RP_SCOPES = "openid email profile" # 向 Authentik 请求这些信息