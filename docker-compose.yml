# Visify Story Studio - 部署配置文件
# ----------------------------------------------------
# 本文件定义了应用所需的所有服务、网络和数据卷。
# 设计用于生产环境或类生产环境的稳定部署。
# ----------------------------------------------------

services:
  # 核心数据库服务
  db:
    image: postgres:16
    container_name: vss-db
    volumes:
      # 将 PostgreSQL 数据持久化到命名卷中，以防容器被删除时数据丢失
      - postgres_data:/var/lib/postgresql/data/
      # 在数据库首次启动时，执行脚本以创建额外的数据库（例如 for Authentik）
      - ./configs/postgres/init-dbs.sh:/docker-entrypoint-initdb.d/init-dbs.sh
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      # 将主机的 5432 端口映射到容器，仅用于可能的外部调试，可按需移除
      - "5432:5432"

  # 消息代理与缓存服务
  redis:
    image: redis:7-alpine
    container_name: vss-redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    expose:
      # 仅在容器网络内部暴露端口，不映射到主机
      - "6379"

  # Django Web 应用主服务
  web:
    image: ghcr.io/weizhangcs/vss-workbench:v1.0.0
    container_name: vss-web
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    # 使用 env_file 指令，直接、可靠地加载 .env 文件中的所有变量
    env_file:
      - .env
    depends_on:
      - db
      - redis

  # Celery 异步任务处理服务
  celery_worker:
    image: ghcr.io/weizhangcs/vss-workbench:v1.0.0
    container_name: vss-celery-worker
    command: celery -A visify_ssw worker -l info
    # 复用 web 服务的 env_file 配置
    env_file:
      - .env
    depends_on:
      - web

  # 本地媒体文件 Nginx 服务
  nginx_media_server:
    image: nginx:1.25-alpine
    container_name: vss-nginx-media
    ports:
      - "9999:80"
    volumes:
      # 挂载 Nginx 配置文件
      - ./configs/nginx/vss-media-server.conf:/etc/nginx/conf.d/default.conf:ro
      # 将本地 media_root 目录挂载到 Nginx 的网站根目录，实现文件伺服
      - ./media_root:/var/www/media_root:ro

  # 第一层标注前端应用
  subeditor:
    image: ghcr.io/weizhangcs/vss-subeditor:v1.0.0
    container_name: vss-subeditor
    ports:
      - "3000:3000"

  # 第二/三层标注工具
  label-studio:
    image: heartexlabs/label-studio:latest
    container_name: vss-label-studio
    ports:
      - "8081:8080"
    volumes:
      # 将 Label Studio 的内部数据持久化到命名卷
      - label_studio_data:/label-studio/data
      # 挂载自定义的 Nginx 代理配置，用于解决与Django集成的认证问题
      - ./configs/nginx/nginx-ls.conf:/etc/nginx/nginx.conf:ro
    environment:
      - LABEL_STUDIO_ALLOW_LEGACY_TOKEN_AUTH=true
      - LABEL_STUDIO_HOST=http://localhost:8081
      - NGINX_PROXY_PASS_AUTHORIZATION=true
      - LABEL_STUDIO_SIGNUP_WITHOUT_INVITE=true
      - DJANGO_SESSION_ENGINE=django.contrib.sessions.backends.cache
      - LABEL_STUDIO_CACHE_BACKEND=django_redis.cache.RedisCache
      - REDIS_LOCATION=redis://redis:6379/1
      - DJANGO_SESSION_COOKIE_SAMESITE=Lax
      - DJANGO_CSRF_COOKIE_SAMESITE=Lax
      - DJANGO_SESSION_COOKIE_SECURE=False
      - DJANGO_CSRF_COOKIE_SECURE=False
      - CSRF_TRUSTED_ORIGINS=http://localhost:8081

  # --- Authentik 身份认证服务 ---
  authentik-server:
    image: ghcr.io/goauthentik/server:2025.6.4
    container_name: vss-authentik-server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRESQL__NAME}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./media_root/authentik/media:/media
      - ./configs/authentik/custom-templates:/templates
    ports:
      - "9000:9000"
      - "9443:9443"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  authentik-worker:
    image: ghcr.io/goauthentik/server:2025.6.4
    container_name: vss-authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRESQL__NAME}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./media_root/authentik/media:/media
      - ./configs/authentik/custom-templates:/templates
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configs/authentik/certs:/certs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

# --- 数据卷定义 ---
volumes:
  postgres_data:
  label_studio_data: